{"related_problems": [], "weightmap": {}, "tags": [], "name": "Failure to Boot", "grader": "test.py", "score": 20, "description": "<p>\nAfter opening the robot's front panel and looking inside, you discover a small red button behind a tangle of wires. Pressing the button lights up the robot's primary screen. It glows black and quickly flashes blue. A line of small text types out:\n</p>\n<pre><code>ERROR: 0x00000023</code></pre>\n<p>\nThe text refreshes and displays the prompt:\n</p>\n<pre><code>FILE SYSTEM RECOVERY INITIATED...\nFILE SYSTEM COULD NOT BE IDENTIFIED...\nPLEASE ENTER FILE SYSTEM FORMAT:</code></pre>\n", "hint": "It might be helpful to Google\u2122 the error.", "category": "Miscellaneous", "threshold": 0, "autogen": false}
{"name": "Try Them All!", "weightmap": {"Failure to Boot": 1}, "grader": "test.py", "score": 45, "description": "I'm bad", "autogen": true, "hint": "There are <a href='http://userpages.umbc.edu/~mabzug1/cs/md5/md5.html' target='_blank'>MD5 implementations</a> for every major programming language. If you don't know what a <a href='http://en.wikipedia.org/wiki/Salt_%28cryptography%29' target='_blank'>salt</a> is, don't worry, it's just a string appended to the password.", "category": "Cryptography", "threshold": 1}
{"name": "Read the Manual", "weightmap": {"Failure to Boot": 1}, "grader": "test.py", "score": 30, "description": "I'm bad.", "autogen": true, "hint": "<p>You may want to check out the video on <a target='_blank' href='/learn'><b>substitution ciphers</b></a>.</p>", "category": "Cryptography", "threshold": 1}
{"related_problems": [], "weightmap": {"Failure to Boot": 1}, "tags": ["search", "forensics", "tar", "command-line"], "name": "Grep is Your Friend", "grader": "test.py", "score": 40, "description": "<p>After plugging the robot into the computer, the robot asks for the name of a file containing the string <code>SECRET AUTH CODE</code>.  You can find it using the <a href='/webshell' target='_blank'> command-line interface</a> in <code>/problems/grep.tar</code> or by downloading <a href='/problems/grep.tar'>all of the files</a>.</p>", "hint": "<p>Learning to use a <a href='http://www.davidbaumgold.com/tutorials/command-line/' target='_blank'>command-line interface</a> can be very empowering!.</p>", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Failure to Boot": 1}, "tags": ["forensics", "images"], "name": "Spaceport Map", "grader": "test.py", "score": 55, "description": "<p>The map of the spaceport is hard to parse, but you're pretty sure there is some hidden information, somewhere...</p><p><img src='/problems/spaceportmap.gif'></p>", "hint": "It looks like an animated <a href='http://en.wikipedia.org/wiki/Graphics_Interchange_Format' target='_blank'>GIF</a>.", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Failure to Boot": 1}, "tags": ["crypto", "bitwise operators", "reverse engineering"], "name": "Bitwise", "grader": "test.py", "score": 55, "description": "<p> You see the doors to the loading bay of the hangar, but they are locked. However, you are able to extract the password verification program from the control panel... Can you find the password to gain access to the loading bay? </p>\n<p> Available in <a href=/problems/bit.py>Python</a> or <a href=/problems/Bit.java>Java</a> </p>", "hint": "Have a look at <a href='https://en.wikipedia.org/wiki/Bitwise_operation#Bitwise_operators' target='_blank'>this</a> for some good truth tables for bitops", "category": "Reverse Engineering", "threshold": 1, "autogen": false}
{"name": "Byte Code", "weightmap": {"Failure to Boot": 1}, "grader": "test.py", "score": 70, "description": "I'm bad.", "autogen": true, "hint": "You're probably going to want to use a decompiler for this, such as jd-gui", "category": "Reverse Engineering", "threshold": 1}
{"related_problems": [], "weightmap": {"Failure to Boot": 1}, "tags": ["file systems", "forensics", "command line"], "name": "Pilot Logic", "grader": "test.py", "score": 75, "description": "<p>You've gotten a <a href='/problems/pilot_image'>partial dump of the disk</a> from the hangar's machine, and you're pretty sure the pilot's password is <i>cleverly hidden</i> somewhere within it...</p><p>The disk image can be found on the shell machines at <code>/problems/pilot_logic.img</code> and the contents of the image are available in <code>/problems/pilot_logic/</code></p>", "hint": "Most filesystems have a way to hide files from being listed.  How can you make ls ignore it?", "category": "Forensics", "threshold": 2, "autogen": false}
{"related_problems": [], "weightmap": {"First Contact": 1, "XMLOL": 1, "Grep is Your Friend": 1, "Read the Manual": 1}, "tags": ["reverse engineering", "assembly", "c", "control flow graph"], "name": "CFG to C", "grader": "test.py", "score": 70, "description": "<p>Wouldn't it be cool to be able to have one of these patrol drones to do your bidding?! Figure out the correct sequence of C functions from the following <a href='/problems/match.html' target='_blank'>control flow graphs</a> and you should be well on your way.</p><p><i>Submit the correct order of functions.</i></p>", "category": "Reverse Engineering", "threshold": 2, "autogen": false}
{"name": "XMLOL", "weightmap": {"Failure to Boot": 1}, "grader": "test.py", "score": 30, "description": "I'm bad.", "autogen": true, "hint": "What is a <a href='http://en.wikipedia.org/wiki/Computer_file' target='_blank'>file</a>? What is <a href='http://www.ibm.com/developerworks/xml/tutorials/xmlintro/' target='_blank'>XML</a>?", "category": "Reverse Engineering", "threshold": 2}
{"related_problems": [], "weightmap": {"First Contact": 1, "XMLOL": 1, "Grep is Your Friend": 1, "Read the Manual": 1}, "tags": {}, "name": "GETKey", "grader": "test.py", "score": 50, "description": "<p>There's bound to be a key on the spaceport's <a href='/problems/getquery/index.php' target='_blank'>hidden website</a></p>", "hint": "Look very closely at the url and think about it a little", "category": "Web Exploitation", "threshold": 2, "autogen": false}
{"related_problems": [], "weightmap": {"Failure to Boot": 1}, "tags": [], "name": "First Contact", "grader": "test.py", "score": 40, "description": "<p>You notice that the indicator light near the robot\u2019s antenna begins to blink. Perhaps the robot is connecting to a network? Using a wireless card and the network protocol analyzer Wireshark, you are able to create a PCAP file containing the packets sent over the network.</p> <p>You suspect that the robot is communicating with the crashed ship. Your goal is to find the location of the ship by inspecting the network traffic.</p> <p>You can perform the analysis online on <a href='http://www.cloudshark.org/captures/bc1c0a7fae2c' target='_blank'>Cloudshark</a> or you can download the <a href=/problems/first_contact.pcap> PCAP file</a>.</p>", "hint": "<p>It may help to learn a bit about <a href='http://mediaplayer.pearsoncmg.com/_ph_cc_ecs_set.title.Introduction_to_Wireshark_and_HTTP__/aw/streaming/ecs_kurose_compnetw_6/wireshark_videonotes.m4v' target='_blank'>network communication on the Internet and Wireshark</a>.</p>", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"First Contact": 1, "XMLOL": 1, "Grep is Your Friend": 1, "Read the Manual": 1}, "tags": [], "name": "Technician Challenge", "grader": "test.py", "score": 30, "description": "<p>The spaceport technician waves to you and you approach him. He tells you that he has noticed you walking around suspiciously. He adds that he knows the door code and is willing to give it to you for answering a small trivia question.</p><blockquote>For what kind of car was the first unlocked iPhone traded?</blockquote>", "category": "Miscellaneous", "threshold": 2, "autogen": false}
{"related_problems": [], "weightmap": {"First Contact": 1, "XMLOL": 1, "Grep is Your Friend": 1, "Read the Manual": 1}, "tags": [], "name": "Yummy", "grader": "test.py", "score": 60, "description": "<p>You want to find out the docking bay numbers for space ships that are ready to launch. Luckily for you, <a href=\"/problems/yummy\" target='_blank'>the website</a> for the docking bay ship status page doesn't seem so secure....</p><p>Enter the docking bay for any of the ships that are awaiting launch.</p>", "hint": "You know what's yummy?  <a href='http://en.wikipedia.org/wiki/HTTP_cookie' target='_blank'>Cookies</a> are yummy.", "category": "Web Exploitation", "threshold": 2, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["file formats", "forensics"], "name": "In Hex, No One Can Hear You Complain", "grader": "test.py", "score": 90, "description": "<p>While flying through the outskirts of the Ripley system, you notice a distress signal from one of the outer moons.  It appears a ship has crash-landed near a 16-sided pyramid.  The lone survivor, a <a href='/problems/kane.docx'>docx file</a>, tells you that a malicious programmer has embedded an egg in his chest and he's afraid that it's going to hatch.  He offers his assistance if you can help find the egg.</p>", "hint": "You should look at the first two bytes of the docx file, and then think about them a little bit...", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["communication", "trivia"], "name": "Robomunication", "grader": "test.py", "score": 80, "description": "<p>We recorded the following <a href='/problems/robo.mp3'>communication</a> between two robots. Find out what evil things they are plotting, and recover their secret key!</p>", "hint": "What are some famous encodings that only use two values?", "category": "Cryptography", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["hex editor", "forensics"], "name": "Spamcarver", "grader": "test.py", "score": 70, "description": "<p>While exploring an alien tomb, you find an <a href='/problems/spamcarver.jpg'>ancient jpg of an ancient can of SPAM</a>.  It seems valueless, but the guardbots really want it back, so perhaps there's something more here than meets the eye.  Maybe it's cursed, or <i>hexed</i>, if you will?</p>", "hint": "As the name of the problem might suggest, you should look into <a href='http://en.wikipedia.org/wiki/File_carving' target='_blank'>file carving</a>", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["core dump", "hex editor", "forensics", "crypto"], "name": "Core Decryption", "grader": "test.py", "score": 120, "description": "<p>In a ruined city on a forgotten world, you find a broken cogitator controlling access to the Vault.  You have blueprints for the machine, and a stickynote attached to the monitor with the encrypted input.  The machine seems to have crashed while decrypting, and generated a <i>core dump</i>, too.  Maybe if you can get the encryption keys out of the core dump, you can decrypt the ciphertext and get the vault open...  <a href='/problems/core_decrypt.tar'>Files available for download here</a> on on the shell machine in <code>/problems/core_decrypt.tar</code></p>", "hint": "gdb can load and read core files", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["steganography", "forensics"], "name": "Chromatophoria", "grader": "test.py", "score": 100, "description": "<p>While refueling at a gas giant, you are hailed by a race of cuttlefish-people who dwell within it.  <a href='/problems/steg.png'>Their transmission</a> is entirely visual; you suspect that they may be communicating through the color values.</p>", "hint": "You may find <a href='http://www.garykessler.net/library/steganography.html' target='_blank'>this</a> useful.", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["wireshark", "network", "forensics"], "name": "Second Contact", "grader": "test.py", "score": 85, "description": "<p>As you're bumming around the Kuiper Belt, you catch an <a href='/problems/kuiper.pcap'>incoming transmission</a> from a distant source.  They seem to be scanning the area, looking for something...  Maybe you should try to find it first.</p><p>This trace file is also available in cloudshark <a href='http://www.cloudshark.org/captures/f0741cdfee53' target='_blank'>here</a></p>", "hint": "Look for packets going to and from a search engine, and the key is the name of the author of the thing they're looking for", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["magic bytes", "hex editor", "forensics"], "name": "NAVSAT", "grader": "test.py", "score": 70, "description": "<p>Near the Sun, you find a malfunctioning warp beacon which is broadcasting a distress signal in a navigational channel.  It looks like it's been damaged by solar radiation, and <a href='/problems/recovery.zip'>some of its data</a> have been corrupted.  If you can recover it, perhaps it will point at you to something interesting.</p>", "hint": "<a href='http://en.wikipedia.org/wiki/List_of_file_signatures' target='_blank'>This</a> list might be of interest to you", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["hex editor", "forensics", "slack space"], "name": "Dark Star", "grader": "test.py", "score": 110, "description": "<p>Sure are a lot of stars <a href='/problems/darkstar.img'>out there</a>...  but there's a lot of empty space for things to hide in, too.</p><p>The disk image can be found on the shell machines at <code>/problems/dark_star.img</code> and the contents of the image are available in <code>/problems/dark_star/</code></p>", "hint": "What have you used to find hidden files in easier forensics problems?", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["cryptography", "vigenere"], "name": "Trivial", "grader": "test.py", "score": 45, "description": "<p>An unlocked terminal is displaying the following: <blockquote>Encryption complete, ENC(???,T0pS3cre7key) = Bot kmws mikferuigmzf rmfrxrwqe abs perudsf! Nvm kda ut ab8bv_w4ue0_ab8v_DDU</blockquote>You poke around and find this interesting <a href='problems/encrypt.py'>file</a>.</p>", "category": "Cryptography", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["cryptography", "substitution"], "name": "Classic", "grader": "test.py", "score": 70, "description": "<p>Someone or something stuck a random flyer on your space ship that reads:<blockquote>cslcehesehft ohrumvc zmvm scmk ht ptohmte ehbmc mxmt eufsju eumq pvm dshem mpchgq lvfymt zheu nsce p rmtohg ptk rprmv, fv bfvm vmomtegq lq ofbbft ofbrsemvhwmk effgc. qfsv ymq hc: zumt_kf_zm_jme_ef_eum_upvk_cesii</blockquote></p>", "category": "Cryptography", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["keygen", "math", "SMT solving"], "name": "Harder Serial", "grader": "test.py", "score": 120, "description": "<p>We found a small scout ship which could aid in your mission, but it is a RoboCorpIntergalactic product, and requires a serial number before you can use it. This serial verifier looks a lot like the one our robot used, but now the serial number needs to be 20 digits. Can you <a href='/problems/harder_serial.py'>take a look</a> and find a valid serial number?</p>", "hint": "They still teach you to solve systems of equations in math classes, right?", "category": "Reverse Engineering", "threshold": 1, "autogen": false}
{"related_problems": ["Python Eval 2", "Python Eval 3", "Python Eval 4", "Python Eval 5"], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["python", "eval"], "name": "Python Eval 1", "grader": "test.py", "score": 85, "description": "<p>A wise master wishes to teach you an ancient art: <a href='/problems/pyeval/stage1.html'>Python Eval 1</a>.</p>", "hint": "Have a look at a simple introduction to python's eval <a href='http://en.wikipedia.org/wiki/Eval#Python' target='_blank'>here</a>", "category": "Script Exploitation", "threshold": 1, "autogen": false}
{"related_problems": ["Python Eval 1", "Python Eval 3", "Python Eval 4", "Python Eval 5"], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["python", "eval"], "name": "Python Eval 2", "grader": "test.py", "score": 95, "description": "<p>It is recommended that you complete Python Eval 1 before trying <a target='_blank' href='/problems/pyeval/stage2.html'>Python Eval 2</a>.</p>", "hint": "What expression can you make the program eval that will tell you the key?", "category": "Script Exploitation", "threshold": 1, "autogen": false}
{"related_problems": ["Python Eval 1", "Python Eval 2", "Python Eval 4", "Python Eval 5"], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["python", "eval"], "name": "Python Eval 3", "grader": "test.py", "score": 110, "description": "<p>Give Python Eval 1 and 2 a shot before moving on to <a target='_blank' href='/problems/pyeval/stage3.html'>Python Eval 3</a>.</p>", "category": "Script Exploitation", "threshold": 1, "autogen": false}
{"related_problems": ["Python Eval 1", "Python Eval 2", "Python Eval 3", "Python Eval 5"], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["python", "eval"], "name": "Python Eval 4", "grader": "test.py", "score": 130, "description": "<p>Solving the previous Python Eval probelms will help you prepare for <a target='_blank' href='/problems/pyeval/stage4.html'>Python Eval 4</a></p>", "category": "Script Exploitation", "threshold": 1, "autogen": false}
{"related_problems": ["Python Eval 1", "Python Eval 2", "Python Eval 3", "Python Eval 4"], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["python", "eval"], "name": "Python Eval 5", "grader": "test.py", "score": 140, "description": "<p>A true challenge awaits you at python.picoctf.com:6365. <a href='/problems/pyeval/task5.py'>Source</a>.</p>", "category": "Script Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["reverse engineering", "java", "crack me"], "name": "avaJ", "grader": "test.py", "score": 85, "description": "<p><a href='problems/Crackme2.class'>elif avaJ</a></p>", "hint": "You should consider using a java decompiler, such as jd-gui", "category": "Reverse Engineering", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["web", "php"], "name": "Pretty Hard Programming", "grader": "test.py", "score": 95, "description": "<p><p>If you can guess the admin's password you can get a key</p><a href='/problems/php1/'>Problem</a> - <a href='/problems/php1/index.phps'>Source</a><p>", "hint": "Read the code very carefully, and figure out what each function call does", "category": "Reverse Engineering", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["reverse engineering", "java"], "name": "Evergreen", "grader": "test.py", "score": 110, "description": "<p>Figure out the key from this <a href='problems/evergreen.zip'>game</a></p>", "hint": "Sorry, no hint for this problem :(", "category": "Reverse Engineering", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"DDoS Detection": 1, "Pilot Logic": 1}, "tags": ["crypto", "rsa"], "name": "RSA", "grader": "test.py", "score": 70, "description": "<p>Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm. <a target='_blank' href='/problems/rsa.txt'>Problem</a></p>", "hint": "<a href='http://en.wikipedia.org/wiki/RSA_(algorithm)' target='_blank'>This page</a> should tell you enough to figure the formulae out on this one.  Then it's just math with very large numbers.", "category": "Cryptography", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["format string", "binary exploitation"], "name": "Format 1", "grader": "test.py", "score": 100, "description": "<p>A simple introduction to the format string family of vulnerabilities. These let you read and write memory in fantastic ways.</p><p>Problem can be found in <blockquote><code>/problems/format_1_d407f39cdf584627</code></blockquote> on the shell machine, binary downloadable <a href='/problems/format1'>here</a> source <a href='/problems/format1.c'>here</a>.</p>", "hint": "You should read up on <a href='http://www.infond.fr/2010/07/tutorial-exploitation-format-string.html' target='_blank'>format string vulnerabilities</a>.  Also feel free to ask us for help!", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["format string", "binary exploitation"], "name": "Format 2", "grader": "test.py", "score": 180, "description": "<p>A simple introduction to the format string family of vulnerabilities. These let you read and write memory in fantastic ways.</p><p>Problem can be found in <blockquote><code>/problems/format_2_358e7afd8b3804d8</code></blockquote> on the shell machine, binary downloadable <a href='/problems/format2'>here</a> source <a href='/problems/format2.c'>here</a>.</p>", "hint": "The trick here is to overwrite one of the entries in the global offset table", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["rop", "return oriented programming", "binary exploitation"], "name": "ROP 1", "grader": "test.py", "score": 95, "description": "<p>ROP is a classic technique for getting around address randomization and non-executable memory. This sequence will teach you the basics.</p><p>Problem available on the shell machine in <code>/problems/ROP_1_fa6168f4d8eba0eb</code> , downloadable <a href='/problems/rop1-fa6168f4d8eba0eb'>here</a> with source <a href='/problems/rop1-fa6168f4d8eba0eb.c'>here</a>.</p><p>If you solve the problem you will be able to read the key file by running <blockquote><code>cat /problems/ROP_1_fa6168f4d8eba0eb/key</code></blockquote> on the PicoCTF shell machine</p>", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["rop", "return oriented programming", "binary exploitation"], "name": "ROP 2", "grader": "test.py", "score": 120, "description": "<p>ROP is a classic technique for getting around address randomization and non-executable memory. This sequence will teach you the basics.</p><p>Problem available on the shell machine in <code>/problems/ROP_2_20f65dd0bcbe267d</code> , downloadable <a href='/problems/rop2-20f65dd0bcbe267d'>here</a> with source <a href='/problems/rop2-20f65dd0bcbe267d.c'>here</a>.</p><p>If you solve the problem you will be able to read the key file by running <blockquote><code>cat /problems/ROP_2_20f65dd0bcbe267d/key</code></blockquote> on the PicoCTF shell machine</p>", "hint": "objdump -t can get you the address in memory of the string /bin/bash...  and then you need to figure out how to pass it as an argument to a call to system somehow", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["rop", "return oriented programming", "binary exploitation"], "name": "ROP 3", "grader": "test.py", "score": 150, "description": "<p>ROP is a classic technique for getting around address randomization and non-executable memory. This sequence will teach you the basics.</p><p>Problem available on the shell machine in <code>/problems/ROP_3_7f3312fe43c46d26</code> , downloadable <a href='/problems/rop3-7f3312fe43c46d26'>here</a> with source <a href='/problems/rop3-7f3312fe43c46d26.c'>here</a>.</p><p>If you solve the problem you will be able to read the key file by running <blockquote><code>cat /problems/ROP_3_7f3312fe43c46d26/key</code></blockquote> on the PicoCTF shell machine</p>", "hint": "You're going to need to use gdb and search through libc for the address of system, exec, or a similar syscall wrapper.", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["rop", "return oriented programming", "binary exploitation"], "name": "ROP 4", "grader": "test.py", "score": 165, "description": "<p><i>Problem has been updated April 28th at midnight EST</i>Another ROP problem, this time a bit harder than before. Available on the shell machine in /problems/ROP_4_887f7f28b1f64d7e .</p>", "hint": "oops, we messed up and use strcpy instead of strcat - but it's still solvable!", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["bof", "buffer overflow", "stack overflow", "binary exploitation"], "name": "Overflow 1", "grader": "test.py", "score": 90, "description": "<p>Stack overflows are the most basic binary exploitation technique, but they take a lot of skill to master. If you already know some C, these problems can help acquaint you with stacks and binary exploitation in general.</p><p>Problem available on the shell machine in <code>/problems/stack_overflow_1_3948d17028101c40</code> , downloadable <a href='/problems/overflow1-3948d17028101c40'>here</a> with source <a href='/problems/overflow1-3948d17028101c40.c'>here</a>.</p><p>If you solve the problem you will be able to read the key file by running <blockquote><code>cat /problems/stack_overflow_1_3948d17028101c40/key</code></blockquote> on the PicoCTF shell machine.</p>", "hint": "In general, the compiler will put things on the stack in the order they appear in the code.  Also google 'endianness'", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["bof", "buffer overflow", "stack overflow", "binary exploitation"], "name": "Overflow 2", "grader": "test.py", "score": 100, "description": "<p>Stack overflows are the most basic binary exploitation technique, but they take a lot of skill to master. If you already know some C, these problems can help acquaint you with stacks and binary exploitation in general.</p><p>Problem available on the shell machine in <code>/problems/stack_overflow_2_44e63640e033ff2b</code> , downloadable <a href='/problems/overflow2-44e63640e033ff2b'>here</a> with source <a href='/problems/overflow2-44e63640e033ff2b.c'>here</a>.</p><p>If you solve the problem you will be able to read the key file by running <blockquote><code>cat /problems/stack_overflow_2_44e63640e033ff2b/key</code></blockquote> on the PicoCTF shell machine.</p>", "hint": "A function's arguments live on top of its stack frame, above its saved ebp and return address.  Make sure not to clobber those, though...", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["bof", "buffer overflow", "stack overflow", "binary exploitation"], "name": "Overflow 3", "grader": "test.py", "score": 120, "description": "<p>Stack overflows are the most basic binary exploitation technique, but they take a lot of skill to master. If you already know some C, these problems can help acquaint you with stacks and binary exploitation in general.</p><p>Problem available on the shell machine in <code>/problems/stack_overflow_3_28d8a442fb232c0c</code> , downloadable <a href='/problems/overflow3-28d8a442fb232c0c'>here</a> with source <a href='/problems/overflow3-28d8a442fb232c0c.c'>here</a>.</p><p>If you solve the problem you will be able to read the key file by running <blockquote><code>cat /problems/stack_overflow_3_28d8a442fb232c0c/key</code></blockquote> on the PicoCTF shell machine.</p>", "hint": "objdump -d is a handy tool for this sort of thing.", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["bof", "buffer overflow", "stack overflow", "binary exploitation"], "name": "Overflow 4", "grader": "test.py", "score": 150, "description": "<p>Stack overflows are the most basic binary exploitation technique, but they take a lot of skill to master. If you already know some C, these problems can help acquaint you with stacks and binary exploitation in general.</p><p>Problem available on the shell machine in <code>/problems/stack_overflow_4_4834efeff17abdfb</code> , downloadable <a href='/problems/overflow4-4834efeff17abdfb'>here</a> with source <a href='/problems/overflow4-4834efeff17abdfb.c'>here</a>.</p><p>If you solve the problem you will be able to read the key file by running <blockquote><code>cat /problems/stack_overflow_4_4834efeff17abdfb/key</code></blockquote> on the PicoCTF shell machine.</p>", "hint": "Gonna need some <a target='_blank' href='http://en.wikipedia.org/wiki/Shellcode'>shellcode</a>. Luckily some is provided for you in the directory on the shell machine.", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["bof", "buffer overflow", "stack overflow", "binary exploitation"], "name": "Overflow 5", "grader": "test.py", "score": 190, "description": "<p>Stack overflows are the most basic binary exploitation technique, but they take a lot of skill to master. If you already know some C, these problems can help acquaint you with stacks and binary exploitation in general.</p><p>Problem available on the shell machine in <code>/problems/stack_overflow_5_0353c1a83cb2fa0d</code> , downloadable <a href='/problems/overflow5-0353c1a83cb2fa0d'>here</a>. Source is not available for this problem.</p><p>If you solve the problem you will be able to read the key file by running <blockquote><code>cat /problems/stack_overflow_5_0353c1a83cb2fa0d/key</code></blockquote> on the PicoCTF shell machine.</p>", "hint": "Now you don't have source, and you aren't allowed to execute code on the stack.  Keep calm and objdump -d", "category": "Binary Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["forensics", "file systems", "hex editor", "images", "extundelete", "xor"], "name": "Black Hole", "grader": "test.py", "score": 115, "description": "<p>Near the galactic core, you find a beacon indicating that an ancient civilization hid one of their worlds <a href='/problems/blackhole.img'>within a nearby black hole</a>.  Is this what passes for intergalactic humor, or is there actually something in there?</p><p>The disk image can be found on the shell machines at <code>/problems/blackhole.img</code> and the contents of the image are available in <code>/problems/blackhole/</code></p>", "hint": "ls -b will help you get past the first hurdle.  Good luck and godspeed.", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["cryptography", "cbc mode", "padding oracle"], "name": "Broken CBC", "grader": "test.py", "score": 125, "description": "<p>We found <a href='/problems/cbc_server.py'>this service</a> running on vuln.picoctf.com. Unfortunately the sensitive information such as the encryption keys, IV, and flag have all been deleted. Our cryptographic spies tell us it is still insecure, but we aren't sure how to send it commands. Do you think you can figure it out?</p>", "hint": "Connect to the service using 'nc vuln.picoctf.com 4567'. You may find <a href='http://www.skullsecurity.org/blog/2013/padding-oracle-attacks-in-depth' target='_blank'>this reference on padding oracle attacks</a> helpful", "category": "Cryptography", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["reversing", "reverse engineering", "pain"], "name": "Mildly Evil", "grader": "test.py", "score": 185, "description": "<p>This binary reversing challenge seems deceptively simple. Can you figure out the key that it accepts?</p><p>Binary available on the shell machine in <code>/problems/mildly_evil/</code> and available for download <a href='/problems/mildly_evil'>here</a></p>", "hint": "You probably want to reverse this dynamically, with a tool like <a href='http://www.dirac.org/linux/gdb/' target='_blank'>gdb</a>", "category": "Reverse Engineering", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"DDoS Detection": 1, "Pilot Logic": 1}, "tags": ["web", "sql injection"], "name": "Injection", "grader": "test.py", "score": 110, "description": "<p>Use the Loading Bay Control System to get the admin key! <a href='/problems/injection/' target='_blank'>Problem</a></p>", "hint": "The SQL query being performed is something a lot like SELECT username,hash FROM pwtable WHERE username= your_input", "category": "Web Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"DDoS Detection": 1, "Pilot Logic": 1}, "tags": [], "name": "Client-Side is the Best Side", "grader": "test.py", "score": 75, "description": "Luckily the ship has a <a href='/problems/clientside.html' target='_blank'>web-based authentication system</a>! Hmm\u2026even though you don't know the password, I bet you can still get in!", "hint": "First rule of web hacking: always read the page source", "category": "Web Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Byte Code": 1}, "tags": ["ddos", "syn flood", "network forensics", "packet analysis"], "name": "DDoS Detection", "grader": "test.py", "score": 85, "description": "<p>It appears a SYN-flood style DDoS has been carried out on this system. Send us a list of the IP addresses of the attackers (in any order, separated by spaces), so we can track them down and stop them.</p> <p> Pcap available to download <a href='/problems/syn_attack.pcap'>here</a>, or available to analyse online <a target='_blank' href='http://www.cloudshark.org/captures/88971318a309'>at CloudShark</a></p>", "hint": "What's a defining pattern in a <a href='http://en.wikipedia.org/wiki/SYN_flood' target='_blank'>syn flood attack</a>?", "category": "Forensics", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["php", "web hacking"], "name": "PHP2", "grader": "test.py", "score": 85, "description": "<p>We found a <a href='https://picoctf.com/problems/php2/' target='_blank'>simple web page</a> that seems to want us to authenticate, but we can't figure out how... can you? </p>", "category": "Web Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["php", "web hacking"], "name": "PHP3", "grader": "test.py", "score": 120, "description": "<p>It looks like <a href='http://picoctf.com/problems/php3/' target='_blank'>this site</a> uses MD5 to hash passwords, but I don't think they're doing it quite right... </p>", "hint": "Look at the PHP md5 function. What does it do when the second argument is True, and how can you make use of that?", "category": "Web Exploitation", "threshold": 1, "autogen": false}
{"related_problems": ["5179dcc0657debeb14000002"], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["php", "web hacking"], "name": "PHP4", "grader": "test.py", "score": 110, "description": "<p>It looks like our web administrators updated their MD5 code after the PHP3 fiasco. However, I still don't think they fixed all the bugs on <a href='http://picoctf.com/problems/php4/' target='_blank'>this site</a>.</p><p>Can you show them what they did wrong by logging in again?</p>", "hint": "They are still vulnerable to SQL injection. What can you do to make your code bypass all the checks?", "category": "Web Exploitation", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["reverse engineering", "obfuscation", "good luck"], "name": "moreevil", "grader": "test.py", "score": 200, "description": "<p>This robot looks... particularly evil. It seems like it only accepts one key, and if you find it, the robot will do your bidding. Can you find the valid key, and gain control over the robot?</p><p>Download the binary <a href='/problems/moreevil' target='_blank'>here</a> or look on the shell machine in /problems/moreevil/</p>", "hint": "Download IDA and stare at it for a few hours. It's a very difficult problem, and there aren't really any shortcuts... good luck", "category": "Reverse Engineering", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["reverse engineering", "java", "decompilation"], "name": "hotcoffee", "grader": "test.py", "score": 85, "description": "<p>This is a compiled Java class file. It looks like it will accept a password, but only one. Can you find the password and control the planet?</p><p>Download the class file <a href='/problems/Crackme.class' target='_blank'>here</a> or look on the shell machine in /problems/hotcoffee/</p>", "hint": "It turns out Java can be decompiled...", "category": "Reverse Engineering", "threshold": 1, "autogen": false}
{"related_problems": [], "weightmap": {"Core Decryption": 1, "Injection": 1, "Client-Side is the Best Side": 1}, "tags": ["cryptography", "rsa"], "name": "Broken RSA", "grader": "test.py", "score": 180, "description": "<p><a href='/problems/broken_rsa_source.py' target='_blank'>This RSA service</a> seems to be broken. They encrypt the flag and send it to you each time... but they throw out the private key and you never get to see it. Any ideas on how to recover the flag?</p><p>Running on vuln.picoctf.com</p>", "hint": "Connect from the shell with 'nc vuln.picoctf.com 6666'. Read up on RSA and try to figure out why this might be bad... Good luck!", "category": "Cryptography", "threshold": 1, "autogen": false}
