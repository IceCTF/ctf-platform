""" Autogeneration handling module """

import api
import random

import os
from os import path
from functools import partial

from api.common import InternalException

seed = ""

def get_seed(tid, pid):
    """
    Get the random generator seed.
    """

    return seed + tid + pid

def seed_generator(tid, pid):
    """
    Sets python's random number generator.

    Args:
        tid: the team id
        pid: the problem id
    Returns:
        The previous state of the random generator
    """

    previous_state = random.getstate()

    random.seed(get_seed(tid, pid))

    return previous_state

def get_instance_number(tid, pid):
    """
    Maps the token to an instance number for a prolem.

    Returns:
        The instance number
    """

    previous_state = seed_generator(tid, pid)

    total_instances = get_number_of_instances(pid)
    if total_instances == 0:
        raise InternalException("{} has no instances.".format(pid))

    instance_number = random.randint(0, total_instances-1)
    random.setstate(previous_state)

    return instance_number

def get_number_of_instances(pid):
    """
    Gets the number of active instances of a problem.

    Args:
        pid: the problem id
    Returns:
        The number of instances.
    """

    return len(os.listdir(get_instance_path(pid)))

def get_static_instance_path(pid, verify=True):
    """
    Gets the path to the static resources of a problem.

    Args:
        pid: the problem pid
        verify: verify the path exists
    Returns:
        The path to the static resources of an autogen problem.
    """

    return path.join(get_instance_path(pid, verify=verify), "static")

def get_instance_path(pid, n="", verify=True):
    """
    Gets the path to a particular instance of a problem.

    Args:
        n: the instance number
        verify: Verify the path exists
    Returns:
        The path to the particular instance.
    """

    problem = api.problem.get_problem(pid=pid)

    grader_path = path.join(api.problem.grader_base_path, problem["grader"])

    instance_path = path.join(path.dirname(grader_path), "instances", str(n))

    if not path.isdir(instance_path) and verify:
        raise InternalException("Instance path {} does not exist.".format(instance_path))

    return instance_path

def get_problem_instance(problem, tid):
    """
        Returns an instance of the autogenerated problem.

        Args:
            problem: the problem object
            tid: the tid
        Returns:
            An instance of the problem object.
    """

    return problem

class GraderProblemInstance(object):
    """
    Represents the instances of an autogenerated problem.
    """

    def __init__(self, tid, pid):

        self.tid = tid
        self.pid = pid

        self.get_instance_path = partial(get_instance_path, pid)
        self.get_instance_number = partial(get_instance_number, tid, pid)
        self.seed_generator = partial(seed_generator, tid, pid)


